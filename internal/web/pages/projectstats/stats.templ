package projectstats

import (
	"tasklify/internal/handlers"
	"tasklify/internal/database"
	"tasklify/internal/web/pages"
	"net/http"
	"time"
	"tasklify/internal/web/components/common"
	"sort"
	"math"
	"github.com/gookit/goutil/dump"
	"fmt"
	"log"
	"strconv"
)

type ChartDataPoint struct {
	X int64   `json:"x"`
	Y float64 `json:"y"`
}

type ChartSeries struct {
	Name string           `json:"name"`
	Data []ChartDataPoint `json:"data"`
}

type SprintAnnotation struct {
	X           int64                 `json:"x"`
	X2          int64                 `json:"x2"`
	BorderColor string                `json:"borderColor"`
	FillColor   string                `json:"fillColor"`
	Opacity     float32               `json:"opacity"`
	YAxisIndex  int                   `json:"yAxisIndex"`
	Label       SprintAnnotationLabel `json:"label"`
}

type SprintAnnotationLabel struct {
	Text        string                     `json:"text"`
	Orientation string                     `json:"orientation"`
	TextAnchor  string                     `json:"textAnchor"`
	Style       SprintAnnotationLabelStyle `json:"style"`
}

type SprintAnnotationLabelStyle struct {
	Color      string `json:"color"`
	Background string `json:"background"`
}

type TimeSeriesPoints struct {
	Time   time.Time
	Points float64
}

type SprintTable struct {
	ID               uint
	Name             string
	StartDate        time.Time
	EndDate          time.Time
	ActualPoints     float64
	RealizedPoints   float64
	PointsDifference float64
}

func ProjectStats(w http.ResponseWriter, r *http.Request, params handlers.RequestParams) error {
	projectID := pages.GetProjectID(r)

	project, err := database.GetDatabase().GetProjectByID(projectID)
	if err != nil {
		return err
	}

	sprints, err := database.GetDatabase().GetSprintByProject(projectID)
	if err != nil {
		return err
	}

	sprintAnnotations := sprintAnnotations(sprints)

	totalPoints, realizedPoints, sprintTables, err := getStatsData(sprints)
	if err != nil {
		return err
	}

	chartData, err := getStatsDataIntoChartData(totalPoints, realizedPoints)
	if err != nil {
		return err
	}

	dump.P(sprintTables)
	dump.P(realizedPoints)

	user, err := database.GetDatabase().GetUserByID(params.UserID)
	if err != nil {
		return err
	}
	projectRoles, _ := database.GetDatabase().GetProjectRoles(params.UserID, projectID)

	c := stats(*project, projectRoles, user.SystemRole, chartData, sprintAnnotations, sprintTables)
	return pages.Layout(c, "Stats", r).Render(r.Context(), w)
}

templ stats(project database.Project, projectRoles []database.ProjectRole, user_SystemRole database.SystemRole, chartData []ChartSeries, sprintAnnotations []SprintAnnotation, sprintTables []SprintTable) {
	@common.ProjectNavbar(project, projectRoles, user_SystemRole, "project_stats") {
		if len(chartData[0].Data) > 0 {
			<div class="min-h-screen">
				<div id="chart" class="w-full p-9"></div>
				@table(sprintTables)
			</div>
			@graph(chartData, sprintAnnotations)
		} else {
			<div class="flex items-center justify-center min-h-screen">
				<p class="text-center mx-auto w-max text-2xl">
					No chart data to display
				</p>
			</div>
		}
	}
}

script graph(chartData []ChartSeries, sprintAnnotations []SprintAnnotation) {
	// console.log(sprintAnnotations)

	var options = {
		series: chartData,
          chart: {
          height: 600,
          type: 'area',
		  zoom: {
            autoScaleYaxis: true
          },
        },
        stroke: {
          curve: 'smooth'
        },
        xaxis: {
			type: 'datetime',
        },
		annotations: {
          xaxis:  sprintAnnotations,
        },

        tooltip: {
          x: {
            format: 'yyyy-MM-dd'
          },
        },
	}

	// Get the chart container element
	var chartContainer = document.querySelector('#chart');

	// Function to clear all child elements from a node
	function clearNode(node) {
		while (node.firstChild) {
			node.removeChild(node.firstChild);
		}
	}

	// Check if the chart container exists, clear it and render the chart
	if (chartContainer) {
		clearNode(chartContainer);

		// Create and render the chart
		var chart = new ApexCharts(chartContainer, options);
		chart.render();
		//console.log({ realizedPoints });
	} else {
		console.log("Chart container not found.");
	}
}

templ table(sprintTables []SprintTable) {
	<div class="overflow-x-auto">
		<table class="table">
			<!-- head -->
			<thead>
				<tr>
					<th>Index</th>
					<th>Project ID</th>
					<th>Project name</th>
					<th>Active</th>
					<th>Start date</th>
					<th>End date</th>
					<th>Actual points</th>
					<th>Realized points</th>
					<th>Points difference</th>
				</tr>
			</thead>
			<tbody>
				<!-- User stories rows -->
				for i, sprintTable := range sprintTables {
					@sprintTableRow(i, sprintTable)
				}
			</tbody>
		</table>
	</div>
}

templ sprintTableRow(index int, sprintTable SprintTable) {
	<!-- row 1 -->
	<tr class="hover">
		<td>
			<div class="font-bold">{ fmt.Sprint(index) }</div>
		</td>
		<!-- Project ID -->
		<td class="min-w-[12rem] max-w-[20rem] truncate">
			{  fmt.Sprint(sprintTable.ID) }
		</td>
		<!-- Project name -->
		<td class="min-w-[12rem] max-w-[20rem] truncate">
			{  sprintTable.Name }
		</td>
		<!-- Active -->
		<td>
			if sprintTable.EndDate.After(time.Now()) {
				<span class="text-green-500 text-lg">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
						<path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5"></path>
					</svg>
				</span>
			} else {
				<span class="text-red-500 text-lg">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
						<path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
					</svg>
				</span>
			}
		</td>
		<!-- Start date -->
		<td class="min-w-[12rem] max-w-[20rem] truncate">
			{  sprintTable.StartDate.Format("02. 01. 2006") }
		</td>
		<!-- End date -->
		<td class="min-w-[12rem] max-w-[20rem] truncate">
			{  sprintTable.EndDate.Format("02. 01. 2006") }
		</td>
		<!-- Actual points -->
		<td class="min-w-[12rem] max-w-[20rem] truncate">
			{  strconv.FormatFloat(sprintTable.ActualPoints, 'f', 2, 64) }
		</td>
		<!-- Realized points -->
		<td class="min-w-[12rem] max-w-[20rem] truncate">
			{  strconv.FormatFloat(sprintTable.RealizedPoints, 'f', 2, 64) }
		</td>
		<!-- Points difference -->
		<td class="min-w-[12rem] max-w-[20rem] truncate">
			{  strconv.FormatFloat(sprintTable.PointsDifference, 'f', 2, 64) }
		</td>
	</tr>
}

func getStatsData(sprints []database.Sprint) (actualPoints, realizedPoints []TimeSeriesPoints, sprintTables []SprintTable, err error) {
	// Sort sprints reverse
	sort.Slice(sprints, func(i, j int) bool {
		return sprints[j].StartDate.Before(sprints[i].StartDate)
	})

	currentActualPoints := 0.0
	currentRealizedPoints := 0.0

	for _, sprint := range sprints {
		if sprint.StartDate.Before(time.Now()) && sprint.Velocity != nil {
			actualPoints = append(actualPoints, TimeSeriesPoints{sprint.EndDate, currentActualPoints})

			currentActualPoints += float64(*sprint.Velocity)
			actualPoints = append(actualPoints, TimeSeriesPoints{sprint.StartDate, currentActualPoints})
		}
	}

	// Sort sprints back in order
	sort.Slice(sprints, func(i, j int) bool {
		return sprints[i].StartDate.Before(sprints[j].StartDate)
	})

	currentRealizedPoints = currentActualPoints

	for _, sprint := range sprints {
		// Skip future sprints
		if sprint.StartDate.After(time.Now()) {
			continue
		}

		sprintTable := SprintTable{
			ID:               sprint.ID,
			Name:             sprint.Title,
			StartDate:        sprint.StartDate,
			EndDate:          sprint.EndDate,
			ActualPoints:     float64(*sprint.Velocity),
			RealizedPoints:   0,
			PointsDifference: 0,
		}

		// Sync first sprint day
		realizedPoints = append(realizedPoints, TimeSeriesPoints{sprint.StartDate, currentRealizedPoints})

		userStories := sprint.UserStories
		var userStoriesRealized []database.UserStory
		for _, userStory := range userStories {
			if userStory.Realized != nil && *userStory.Realized {
				userStoriesRealized = append(userStoriesRealized, userStory)
			}
		}

		sort.Slice(userStoriesRealized, func(i, j int) bool {
			tasksI := userStoriesRealized[i].Tasks
			tasksJ := userStoriesRealized[j].Tasks

			taskIWorkSession := tasksI[len(tasksI)-1].WorkSessions
			taskILastWorkSession := taskIWorkSession[len(taskIWorkSession)-1]

			taskJWorkSession := tasksJ[len(tasksJ)-1].WorkSessions
			taskJLastWorkSession := taskJWorkSession[len(taskJWorkSession)-1]

			return taskILastWorkSession.EndTime.Before(*taskJLastWorkSession.EndTime)
		})

		for _, userStory := range userStoriesRealized {
			log.Println()
			for i, task := range userStory.Tasks {
				for ii, workSession := range task.WorkSessions {
					log.Printf("%d %d %s\n", i, ii, workSession.EndTime)
				}
			}
			log.Println()

			sprintTable.RealizedPoints += userStory.StoryPoints

			currentRealizedPoints -= userStory.StoryPoints

			lastUserStoryTaskWorkSessions := userStory.Tasks[len(userStory.Tasks)-1].WorkSessions
			endTime := *lastUserStoryTaskWorkSessions[len(lastUserStoryTaskWorkSessions)-1].EndTime
			realizedPoints = append(realizedPoints, TimeSeriesPoints{endTime, currentRealizedPoints})

		}

		sprintTable.PointsDifference = sprintTable.ActualPoints - sprintTable.RealizedPoints
		sprintTables = append(sprintTables, sprintTable)

		// Sync last sprint day
		realizedPoints = append(realizedPoints, TimeSeriesPoints{sprint.EndDate, currentRealizedPoints})
	}

	return
}

func getStatsDataIntoChartData(actualPoints, realizedPoints []TimeSeriesPoints) ([]ChartSeries, error) {
	var actualSeriesData []ChartDataPoint
	var realizedSeriesData []ChartDataPoint

	sort.Slice(actualPoints, func(i, j int) bool {
		return actualPoints[i].Time.Before(actualPoints[j].Time)
	})

	sort.Slice(realizedPoints, func(i, j int) bool {
		return realizedPoints[i].Time.Before(realizedPoints[j].Time)
	})

	for _, data := range actualPoints {
		actualSeriesData = append(actualSeriesData, ChartDataPoint{X: data.Time.UnixMilli(), Y: roundToTwoDecimals(data.Points)})
	}

	for _, data := range realizedPoints {
		realizedSeriesData = append(realizedSeriesData, ChartDataPoint{X: data.Time.UnixMilli(), Y: roundToTwoDecimals(data.Points)})
	}

	actualSeries := ChartSeries{Name: "Assigned Story Points", Data: actualSeriesData}
	expectedSeries := ChartSeries{Name: "Actual/realized Story Points", Data: realizedSeriesData}

	chartData := []ChartSeries{actualSeries, expectedSeries}

	return chartData, nil
}

func sprintAnnotations(sprints []database.Sprint) (sprintAnnotations []SprintAnnotation) {
	for _, sprint := range sprints {
		sprintAnnotations = append(sprintAnnotations, SprintAnnotation{
			X:           sprint.StartDate.UnixMilli(),
			X2:          sprint.EndDate.UnixMilli(),
			BorderColor: "#999",
			FillColor:   "#65c3c8",
			Opacity:     0.1,
			YAxisIndex:  0,
			Label: SprintAnnotationLabel{
				Text:        sprint.Title,
				Orientation: "horizontal",
				TextAnchor:  "right",
				Style: SprintAnnotationLabelStyle{
					Color:      "#fff",
					Background: "#65c3c8",
				},
			},
		})
	}

	return
}

// roundToTwoDecimals rounds a float64 to two decimal places.
func roundToTwoDecimals(num float64) float64 {
	factor := 100.0
	return math.Round(num*factor) / factor
}
