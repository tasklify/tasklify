package productbacklog

import "tasklify/internal/database"
import "fmt"
import "strconv"

templ productBacklog(backlogUserStories []database.UserStory, sprints map[string]database.Sprint, projectID uint, projectRole database.ProjectRole) {
	<div id="dialog">
		<div class="bg-base-100 min-h-screen">
			<div>
				<!-- Buttons Container -->
				<div class="flex justify-between items-center mb-4 pt-2 pl-2 pr-2">
					<!-- Left Aligned Buttons -->
					<div>
						<a href="/dashboard" class="btn btn-primary btn-sm">Back to Dashboard</a>
					</div>
					<!-- Right Aligned Buttons -->
					if projectRole == database.ProjectRoleManager {
						<div>
							<form hx-get="/createuserstory" hx-target="#dialog-create">
								<input type="hidden" id="projectID" name="projectID" value={ fmt.Sprint(projectID) }/>
								<button class="btn btn-primary btn-sm">Create User Story</button>
							</form>
						</div>
					} else if projectRole == database.ProjectRoleMaster {
						<div>
							<form hx-get="/createuserstory" hx-target="#dialog-create">
								<input type="hidden" id="projectID" name="projectID" value={ fmt.Sprint(projectID) }/>
								<button class="btn btn-primary btn-sm">Create User Story</button>
							</form>
							<button class="btn btn-primary btn-sm ml-2" hx-get="/createsprint" hx-target="#dialog-create">Create Sprint</button>
						</div>
					}
				</div>
				<div id="dialog-create"></div>
				<div class="flex flex-col w-full lg:flex-row">
					<!-- Backlog - unassigned, unrealized -->
					@backlog(backlogUserStories, getLatestSprint(sprints), "/productbacklog?projectID="+strconv.Itoa(int(projectID)))
					<!-- Divide -->
					<div class="divider lg:divider-horizontal"></div>
					<!-- Sprints -->
					<div class="bg-base-100 join join-vertical w-full mt-2 mr-2">
						<!-- Sprint -->
						for _,sprint := range sprints {
							<div class="collapse collapse-arrow border border-base-300 mb-4">
								<input type="checkbox" checked/>
								<div class="collapse-title text-xl font-medium bg-base-300 text-base-500">
									{ sprint.Title }
									if sprint.DetermineStatus() == database.StatusInProgress {
										<span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-300">
											Active
										</span>
									} else if sprint.DetermineStatus() == database.StatusDone {
										<span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-300">
											Done
										</span>
									} else {
										<span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-300">
											Upcoming
										</span>
									}
								</div>
								<div class="collapse-content card-body bg-base-100">
									<div class="flex justify-end">
										<!-- Places the button nicely -->
										<!-- Sprint Backlog Button -->
										if sprint.DetermineStatus() == database.StatusInProgress {
											<form hx-get="/sprintbacklog" hx-target="#whole" class="ml-auto">
												<button class="btn btn-sm bg-primary">Sprint Backlog</button>
												<input type="hidden" id="sprintID" name="sprintID" value={ fmt.Sprint(sprint.ID) }/>
											</form>
										}
									</div>
									<!-- user story table and other contents -->
									<div class="overflow-x-auto">
										<table class="table">
											<!-- head -->
											<thead>
												<tr>
													<th>Title</th>
													<th>Description</th>
													<th>Priority</th>
													<th>Assigned</th>
													<th>Realized</th>
													<th></th>
												</tr>
											</thead>
											<tbody>
												<!-- User stories rows -->
												for _, v := range sprint.UserStories {
													@userStoryTableRow(v)
												}
											</tbody>
										</table>
									</div>
								</div>
							</div>
						}
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ userStoryCard(name string, description string) {
	<!-- user story -->
	<div class="card card-compact bg-base-100 shadow-xl hover:shadow-2xl transition-shadow w-full">
		<div class="card-body">
			<h2 class="card-title">{ name }</h2>
			<p>{ description }</p>
		</div>
	</div>
}

templ backlog(backlogUserStories []database.UserStory, sprint database.Sprint, callback string) {
	<div class="card card-compact bg-base-200 transition-shadow w-2/5 mt-2 ml-2">
		<div class="card-title collapse-title text-xl font-medium bg-base-300 border-base-300">Product backlog</div>
		<div class="card-body">
			<form id="backlogForm" hx-post="/productbacklog">
				<table class="table w-full">
					<thead>
						<tr>
							<th>Title</th>
							<th>Description</th>
							<th>Selected</th>
						</tr>
					</thead>
					<tbody>
						for _, us := range backlogUserStories {
							<tr>
								<td>{ us.Title }</td>
								<td>{ *us.Description }</td>
								if us.StoryPoints != 0 {
									<td><input type="checkbox" class="checkbox" name="selectedTasks" value={ strconv.Itoa(int(us.ID)) }/></td>
								} else {
									<td><input type="checkbox" class="checkbox" name="selectedTasks" value={ strconv.Itoa(int(us.ID)) } title="Please add story points" disabled/></td>
								}
							</tr>
						}
					</tbody>
				</table>
				<div class="mt-4 flex justify-end">
					<input type="hidden" name="sprintID" value={ strconv.Itoa(int(sprint.ID)) }/>
					<input type="hidden" name="callback" value={ callback }/>
					<button type="submit" class="btn btn-primary">Add to Sprint</button>
				</div>
			</form>
		</div>
	</div>
}

func getLatestSprint(sprints map[string]database.Sprint) database.Sprint {
	var latestSprint database.Sprint
	for _, sprint := range sprints {
		if sprint.StartDate.After(latestSprint.StartDate) {
			latestSprint = sprint
		}
	}
	return latestSprint
}

templ userStoryTableRow(us database.UserStory) {
	<!-- row 1 -->
	<tr class="hover">
		<td>
			<div class="font-bold">{ us.Title }</div>
		</td>
		<!-- Description -->
		<td class="min-w-[12rem] max-w-[20rem] whitespace-normal">
			{ *us.Description }
		</td>
		<!-- Priority -->
		<td>
			switch us.Priority {
				case database.PriorityMustHave:
					<div class="badge badge-error">Must have</div>
				case database.PriorityCouldHave:
					<div class="badge badge-warning">Could have</div>
				case database.PriorityShouldHave:
					<div class="badge badge-success">Should have</div>
				case database.PriorityWontHaveThisTime:
					<div class="badge badge-info">Won't have this time</div>
				default:
					<span></span>
			}
		</td>
		<!-- Assigned -->
		<td>
			if us.UserID == nil {
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
				</svg>
			} else {
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5"></path>
				</svg>
			}
		</td>
		<!-- Realized -->
		<td>
			if *us.Realized {
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5"></path>
				</svg>
			} else {
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
				</svg>
			}
		</td>
		<th>
			<button class="btn btn-xs">details</button>
		</th>
	</tr>
}
