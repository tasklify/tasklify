package productbacklog

import "tasklify/internal/database"
import "tasklify/internal/web/components/common"
import "fmt"
import "strconv"
import "tasklify/internal/auth"

templ productBacklog(backlogUserStories []database.UserStory, sprints []database.Sprint, projectID uint, projectRole database.ProjectRole, project database.Project, user_SystemRole database.SystemRole) {
	<div class="bg-base-100 min-h-screen">
		<div>
			<div class="flex p-4 border-b-2 border-b-gray-300 bg-base-300">
				<div class="flex-1">
					<h1 class="font-bold text-3xl">{ project.Title }</h1>
					<h4>Project board</h4>
				</div>
				if auth.GetAuthorization().HasSystemPermission(user_SystemRole, "/project", auth.ActionUpdate) == nil || 
					auth.GetAuthorization().HasProjectPermission(projectRole, "/project", auth.ActionUpdate) == nil {
					<div>
						<details class="dropdown dropdown-bottom dropdown-end">
							<summary class="m-1 btn">&#8942;</summary>
							<ul tabindex="0" class="p-2 shadow menu dropdown-content z-[1] bg-base-100 rounded-box w-52">
								<li><a hx-get={ fmt.Sprint("/edit-project-info/", projectID) } hx-target="#whole" hx-swap="innerHTML" hx-push-url="true">Edit project info</a></li>
								<li><a hx-get={ fmt.Sprint("/edit-project-members/", projectID) } hx-target="#whole" hx-swap="innerHTML" hx-push-url="true">Edit project members</a></li>
							</ul>
						</details>
					</div>
				}
			</div>
			<!-- Buttons Container -->
			<div class="flex justify-between items-center mb-4 pt-2 pl-2 pr-2">
				<a href="/" class="btn btn-primary btn-sm">Back to Dashboard</a>
				<div>
					if projectRole == database.ProjectRoleManager {
						<div class="flex">
							<form hx-get={ fmt.Sprintf("/%v/createuserstory", projectID) } hx-target="#dialog" style="display: inline;">
								<button class="btn btn-primary btn-sm">Create User Story</button>
							</form>
							<a href="https://github.com/tasklify/tasklify/tree/main?tab=readme-ov-file#product-backlog" target="_blank" class="help-button ml-4" style="position: relative;top:0px;right:0px">?</a>
						</div>
					} else if projectRole == database.ProjectRoleMaster {
						<div class="flex">
							<form hx-get={ fmt.Sprintf("/%v/createuserstory", projectID) } hx-target="#dialog" style="display: inline;">
								<button class="btn btn-primary btn-sm">Create User Story</button>
							</form>
							<form hx-get="/createsprint" hx-target="#dialog" style="display: inline;">
								<input type="hidden" id="projectID" name="projectID" value={ fmt.Sprint(projectID) }/>
								<button class="btn btn-primary btn-sm ml-2">Create Sprint</button>
							</form>
							<a href="https://github.com/tasklify/tasklify/tree/main?tab=readme-ov-file#product-backlog" target="_blank" class="help-button ml-4" style="position: relative;top:0px;right:0px">?</a>
						</div>
					} else {
						<a href="https://github.com/tasklify/tasklify/tree/main?tab=readme-ov-file#product-backlog" target="_blank" class="help-button ml-4" style="position: relative;top:0px;right:0px">?</a>
					}
				</div>
			</div>
			<div class="flex flex-col w-full lg:flex-row">
				<!-- Backlog - unassigned, unrealized -->
				@backlog(backlogUserStories, getActiveSprint(sprints), "/productbacklog?projectID="+strconv.Itoa(int(projectID)), projectRole)
				<!-- Divide -->
				<div class="divider lg:divider-horizontal"></div>
				<!-- Sprints -->
				<div class="bg-base-100 join join-vertical w-full mt-2 mr-2">
					<!-- Sprint -->
					for _,sprint := range sprints {
						<div class="collapse collapse-arrow border border-base-300 mb-4">
							<input type="checkbox" checked/>
							<div class="collapse-title text-xl font-medium bg-base-300 text-base-500" style="display: flex; justify-content: space-between;">
								<div>
									{ sprint.Title }
									<div class="text-sm text-gray-600">({ sprint.StartDate.Format("Mon Jan _2 2006") } - { sprint.EndDate.Format("Mon Jan _2 2006") })</div>
								</div>
								if sprint.DetermineStatus() == database.StatusInProgress {
									<span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-300">
										Active
									</span>
								} else if sprint.DetermineStatus() == database.StatusDone {
									<span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-300">
										Done
									</span>
								} else {
									<span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-300">
										Upcoming
									</span>
								}
							</div>
							<div class="collapse-content card-body bg-base-100">
								<div class="flex justify-end">
									<!-- Places the button nicely -->
									<!-- Sprint Backlog Button -->
									if sprint.DetermineStatus() == database.StatusInProgress {
										<form hx-get={ fmt.Sprint("/sprintbacklog/", sprint.ID) } hx-target="#whole" class="ml-auto">
											<button class="btn btn-sm bg-primary">Sprint Backlog</button>
										</form>
									}
								</div>
								<!-- user story table and other contents -->
								if len(sprint.UserStories) > 0 {
									<div class="overflow-x-auto">
										<table class="table">
											<!-- head -->
											<thead>
												<tr>
													<th>Title</th>
													<th>Description</th>
													<th>Priority</th>
													<th>Assigned</th>
													<th>Realized</th>
													<th></th>
												</tr>
											</thead>
											<tbody>
												<!-- User stories rows -->
												for _, v := range sprint.UserStories {
													@userStoryTableRow(v, sprint.DetermineStatus(), projectRole, "/productbacklog?projectID="+strconv.Itoa(int(projectID)))
												}
											</tbody>
										</table>
									</div>
								} else {
									<div>No user stories in sprint yet</div>
								}
							</div>
						</div>
					}
				</div>
			</div>
		</div>
	</div>
}

templ userStoryCard(name string, description string) {
	<!-- user story -->
	<div class="card card-compact bg-base-100 shadow-xl hover:shadow-2xl transition-shadow w-full">
		<div class="card-body">
			<h2 class="card-title">{ name }</h2>
			<p>{ description }</p>
		</div>
	</div>
}

templ backlog(backlogUserStories []database.UserStory, sprint database.Sprint, callback string, projectRole database.ProjectRole) {
	<div class="card card-compact bg-base-200 transition-shadow w-2/5 mt-2 ml-2">
		<div class="card-title collapse-title text-xl font-medium bg-base-300 border-base-300">Backlog</div>
		<a href="https://github.com/tasklify/tasklify/tree/main?tab=readme-ov-file#adding-user-stories-to-sprint" target="_blank" class="help-button" style="padding-right=10rem;">?</a>
		<div class="card-body">
			<form id="backlogForm" hx-post="/productbacklog">
				<table class="table w-full">
					<thead>
						<tr>
							<th>Title</th>
							<th>Description</th>
							<th>Details</th>
							if projectRole == database.ProjectRoleMaster {
								<th>Selected</th>
							}
						</tr>
					</thead>
					<tbody>
						for _, us := range backlogUserStories {
							<tr>
								<td>{ us.Title }</td>
								<td class="min-w-[12rem] max-w-[20rem] truncate">
									{ *us.Description }
								</td>
								<td>
									<!--Details button-->
									<button hx-get="/userstory/details" hx-target="#dialog" hx-indicator="#dialog" hx-vals={ fmt.Sprintf("{\"userStoryID\": \"%s\"}", strconv.Itoa(int(us.ID))) } class="btn btn-xs">
										<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
											<path stroke-linecap="round" stroke-linejoin="round" d="M6.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM12.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM18.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z"></path>
										</svg>
									</button>
								</td>
								if projectRole == database.ProjectRoleMaster {
									if us.StoryPoints != 0 {
										<td><input type="checkbox" class="checkbox" name="selectedTasks" value={ strconv.Itoa(int(us.ID)) }/></td>
									} else {
										<td><input type="checkbox" class="checkbox" name="selectedTasks" value={ strconv.Itoa(int(us.ID)) } title="Please add story points" disabled/></td>
									}
								}
							</tr>
						}
					</tbody>
				</table>
				if projectRole == database.ProjectRoleMaster {
					<div class="mt-4 flex justify-end">
						<input type="hidden" name="sprintID" value={ strconv.Itoa(int(sprint.ID)) }/>
						<input type="hidden" name="callback" value={ callback }/>
						<button type="submit" class="btn btn-primary">Add to Sprint</button>
					</div>
				}
			</form>
		</div>
	</div>
}

func getActiveSprint(sprints []database.Sprint) database.Sprint {

	var activeSprint database.Sprint
	for _, sprint := range sprints {
		if sprint.DetermineStatus() == database.StatusInProgress {
			activeSprint = sprint
		}
	}
	return activeSprint
}

templ userStoryTableRow(us database.UserStory, status database.Status, projectRole database.ProjectRole, callback string) {
	<!-- row 1 -->
	<tr class="hover">
		<td>
			<div class="font-bold">{ us.Title }</div>
		</td>
		<!-- Description -->
		<td class="min-w-[12rem] max-w-[20rem] truncate">
			{ *us.Description }
		</td>
		<!-- Priority -->
		<td>
			switch us.Priority {
				case database.PriorityMustHave:
					<div class="badge badge-error">Must have</div>
				case database.PriorityCouldHave:
					<div class="badge badge-warning">Could have</div>
				case database.PriorityShouldHave:
					<div class="badge badge-success">Should have</div>
				case database.PriorityWontHaveThisTime:
					<div class="badge badge-info">Won't have this time</div>
				default:
					<span></span>
			}
		</td>
		<!-- Assigned -->
		<td>
			if us.UserID == nil {
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
				</svg>
			} else {
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5"></path>
				</svg>
			}
		</td>
		<!-- Realized -->
		<td>
			if *us.Realized {
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5"></path>
				</svg>
			} else {
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
				</svg>
			}
		</td>
		<!-- Details -->
		<td>
			<div class="flex flex-col space-y-2">
				<div class="flex btn-container space-x-4 max-w-[10rem]">
					<!--Details button-->
					<form hx-post="/userstory/details" hx-target="#dialog">
						<input type="hidden" name="userStoryID" id="userStoryID" value={ strconv.Itoa(int(us.ID)) }/>
						<button class="btn btn-xs">
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
								<path stroke-linecap="round" stroke-linejoin="round" d="M6.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM12.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM18.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z"></path>
							</svg>
						</button>
					</form>
					<!--Remove from sprint button-->
					if *us.Realized {
						<div class="flex-grow" title="Can't remove relaized user story from sprint">
							<button class="btn btn-xs" disabled>
								<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
									<path stroke-linecap="round" stroke-linejoin="round" d="m9.75 9.75 4.5 4.5m0-4.5-4.5 4.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path>
								</svg>
							</button>
						</div>
					} else {
						<form class="flex-grow" hx-post="/userstory/remove-from-sprint" hx-target="#dialog">
							<input type="hidden" name="userStoryID" value={ strconv.Itoa(int(us.ID)) }/>
							<input type="hidden" name="callback" value={ callback }/>
							<button class="btn btn-xs">
								<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
									<path stroke-linecap="round" stroke-linejoin="round" d="m9.75 9.75 4.5 4.5m0-4.5-4.5 4.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path>
								</svg>
							</button>
						</form>
					}
				</div>
				<div class="flex justify-start space-x-2">
					if (*us.Realized == false && projectRole == database.ProjectRoleManager && status == database.StatusDone) {
						if (us.AllTasksRealized() == false && us.AllAcceptanceTestsRealized() == false) {
							<div class="btn-container" title="Not all tasks were realized and not all acceptance tests were passed for this user story.">
								<button type="submit" class="btn btn-xs" disabled>Accept</button>
							</div>
							<form hx-get={ fmt.Sprintf("userstory/%v/reject", us.ID) } hx-target="#dialog">
								<button type="submit" class="btn bg-red-500 btn-xs">Reject</button>
							</form>
						} else if us.AllTasksRealized() == false && us.AllAcceptanceTestsRealized() == true {
							<div class="btn-container" title="Not all tasks were realized for this user story.">
								<button type="submit" class="btn btn-xs" disabled>Accept</button>
							</div>
							<form hx-get={ fmt.Sprintf("userstory/%v/reject", us.ID) } hx-target="#dialog">
								<button type="submit" class="btn bg-red-500 btn-xs">Reject</button>
							</form>
						} else if us.AllTasksRealized() == true && us.AllAcceptanceTestsRealized() == false {
							<div class="btn-container" title="Not all acceptance tests were passed for this user story.">
								<button type="submit" class="btn btn-xs" disabled>Accept</button>
							</div>
							<form hx-get={ fmt.Sprintf("userstory/%v/reject", us.ID) } hx-target="#dialog">
								<button type="submit" class="btn bg-red-500 btn-xs">Reject</button>
							</form>
						} else {
							<form hx-post={ fmt.Sprintf("userstory/%v/accept", us.ID) } id="backlogForm">
								<button type="submit" class="btn bg-green-600 btn-xs">Accept</button>
							</form>
							<form hx-get={ fmt.Sprintf("userstory/%v/reject", us.ID) } hx-target="#dialog">
								<button type="submit" class="btn bg-red-500 btn-xs">Reject</button>
							</form>
						}
					}
				</div>
			</div>
		</td>
	</tr>
}

templ CreateRejectionCommentDialog(userStoryID uint) {
	@common.CreateDialog("Create rejection comment", fmt.Sprintf("userstory/%v/reject", userStoryID)) {
		<!-- Rejection Comment Field -->
		<div class="mb-4">
			<textarea id="comment" name="comment" placeholder="This can be left empty" class="textarea mt-1 p-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"></textarea>
		</div>
	}
}
