package productbacklog

import "tasklify/internal/database"
import "fmt"
import "fmt"

templ productBacklog(backlogUserStories []database.UserStory, sprintUserStories map[string][]database.UserStory, sprints map[string]database.Sprint, activity map[string]database.Status, projectID uint) {
  <div id="dialog">
    <div class="bg-base-100 min-h-screen">
         <div>
            <!-- Buttons Container -->
            <div class="flex justify-between items-center mb-4 pt-2 pl-2 pr-2">
                <!-- Left Aligned Buttons -->
                <div>
                  <a href="/dashboard" class="btn btn-primary btn-sm">Back to Dashboard</a>
                </div>
                <!-- Right Aligned Buttons -->
                <div>
                  <form hx-get="/createuserstory" hx-target="#dialog-create">
                  <input type="hidden" id="projectID" name="projectID" value={ fmt.Sprint(projectID) }/>
                  <button class="btn btn-primary btn-sm">Create User Story</button>
                  </form>
                  <button class="btn btn-primary btn-sm ml-2" hx-get="/createsprint" hx-target="#dialog-create">Create Sprint</button>
                </div>
            </div>
            <div id="dialog-create"></div>
         <div>
            <!-- Buttons Container -->
            <div class="flex justify-between items-center mb-4 pt-2 pl-2 pr-2">
                <!-- Left Aligned Buttons -->
                <div>
                  <a href="/dashboard" class="btn btn-primary btn-sm">Back to Dashboard</a>
                </div>
                <!-- Right Aligned Buttons -->
                <div>
                  <form hx-get="/createuserstory" hx-target="#dialog-create">
                  <input type="hidden" id="projectID" name="projectID" value={ fmt.Sprint(projectID) }/>
                  <button class="btn btn-primary btn-sm">Create User Story</button>
                  </form>
                  <button class="btn btn-primary btn-sm ml-2" hx-get="/createsprint" hx-target="#dialog-create">Create Sprint</button>
                </div>
            </div>
            <div id="dialog-create"></div>
            <div class="flex flex-col w-full lg:flex-row">

              <!-- Backlog - unassigned, unrealized -->
              <div class="card card-compact bg-base-200 transition-shadow w-2/5 mt-2 ml-2">
                  <div class="card-title collapse-title text-xl font-medium bg-base-300 border-base-300">Product backlog</div>
                  <div class="card-body">
                    for _, us := range backlogUserStories {
                           <div class="card card-compact bg-base-100 shadow-xl hover:shadow-2xl transition-shadow w-full">
                             <div class="card-body">
                               <h2 class="card-title">{ us.Title }</h2>
                               <p>{ *us.Description }</p>
                             </div>
                           </div>
                       }
                  </div>
               </div>

              <!-- Divide -->
              <div class="divider lg:divider-horizontal"></div>

              <!-- Sprints -->
              <div class="bg-base-100 join join-vertical w-full mt-2 mr-2">

                 <!-- Sprint -->
                 for k, us := range sprintUserStories {

                    <div class="collapse collapse-arrow border border-base-300 mb-4">
                      <input type="checkbox" checked /> 
                      if activity[k] == database.StatusInProgress {
                      <div class="collapse-title text-xl font-medium bg-primary">
                        {sprints[k].Title} <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-300">
                            Active
                          </span>
                      </div>}
                      else if activity[k] == database.StatusDone {
                        <div class="collapse-title text-xl font-medium bg-base-300 text-base-500">
                        {sprints[k].Title} <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-300">
                            Done
                          </span>
                      </div>
                      } else {
                       <div class="collapse-title text-xl font-medium bg-base-300">
                        {sprints[k].Title} <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-300">
                            Done
                          </span>
                      </div>
                      }
                      
                      <div class="collapse-content card-body bg-base-100">
                       <div class="flex justify-end"> <!-- Places the button nicely -->
                          <!-- Sprint Backlog Button -->
                          if activity[k] == database.StatusInProgress {
                            <form hx-get="/sprintbacklog" hx-target="#whole" class="ml-auto">
                              <button class="btn btn-sm bg-primary">Sprint Backlog</button>
                              <input type="hidden" id="sprintID" name="sprintID" value={ fmt.Sprint(sprints[k].ID) }/>
                            </form>
                          }
                        </div>
                        <!-- user story table and other contents -->
                        <div class="overflow-x-auto">
                          <table class="table">
                            <!-- head -->
                            <thead>
                              <tr>
                                <th>Title</th>
                                <th>Description</th>
                                <th>Priority</th>
                                <th>Assigned</th>
                                <th>Realized</th>
                                <th></th>
                              </tr>
                            </thead>

                            <tbody>
                                <!-- User stories rows -->
                                for _, v := range us {

                                    @userStoryTableRow(v)

                                }
                            </tbody>

                          </table>
                        </div>

                      </div>
                    </div>

                 }

              </div>

            </div>
        </div>
    </div>
            </div>
        </div>
    </div>
    </div>

}


templ userStoryCard(name string, description string) {
	<!-- user story -->
    <div class="card card-compact bg-base-100 shadow-xl hover:shadow-2xl transition-shadow w-full">
      <div class="card-body">
        <h2 class="card-title">{name}</h2>
        <p>{description}</p>
      </div>
   </div>
}

templ userStoryTableRow(us database.UserStory) {

          <!-- row 1 -->
          <tr class="hover">

            <td>
              <div class="font-bold">{us.Title}</div>
            </td>

            <!-- Description -->
            <td class="min-w-[12rem] max-w-[20rem] whitespace-normal">
                {*us.Description}
            </td>

            <!-- Priority -->
            <td>
             switch us.Priority {
                        case database.PriorityMustHave:
                            <div class="badge badge-error">Must have</div>
                        case database.PriorityCouldHave:
                            <div class="badge badge-warning">Could have</div>
                        case database.PriorityShouldHave:
                            <div class="badge badge-success">Should have</div>
                        case database.PriorityWontHaveThisTime:
                            <div class="badge badge-info">Won't have this time</div>
                        default:
                            <span></span>
             }

            </td>

            <!-- Assigned -->
            <td>
                if us.UserID == nil {
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                    </svg>
                } else {
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                       <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5" />
                    </svg>
                }
            </td>

            <!-- Realized -->
            <td>
                if *us.Realized {
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                       <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5" />
                    </svg>
                } else {
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                    </svg>
                }
            </td>

            <th>
              <button class="btn btn-xs">details</button>
            </th>

          </tr>
}
