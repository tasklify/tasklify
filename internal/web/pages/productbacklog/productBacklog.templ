package productbacklog

import "tasklify/internal/database"
import "tasklify/internal/web/components/common"
import "fmt"
import "strconv"
import "net/http"
import "slices"

templ productBacklog(backlogUserStories []database.UserStory, doneUserStories []database.UserStory, futureUserStories []database.UserStory, sprints []database.Sprint, projectID uint, projectRoles []database.ProjectRole, project database.Project, user_SystemRole database.SystemRole) {
	<script>
function toggleTab(selectedId) {
    // Hide all tab contents
    document.querySelectorAll('.tab-content').forEach((content) => {
        content.style.display = 'none';
    });
    // Show the selected tab content
    document.getElementById(selectedId).style.display = 'block';

    // Remove 'tab-active' class from all tabs
    document.querySelectorAll('.tabs a').forEach((tab) => {
        tab.classList.remove('tab-active');
    });
    // Add 'tab-active' class to the clicked tab
    document.querySelector(`.tabs a[data-content="${selectedId}"]`).classList.add('tab-active');
}
document.addEventListener("DOMContentLoaded", function() {
    // Automatically click the Backlog tab on initial load
    document.querySelector('.tabs a[data-content="backlog"]').click();
});
</script>
	@common.ProjectNavbar(project, projectRoles, user_SystemRole, "project_board") {
		<div class="flex-1 overflow-y-auto" style="padding-right: 16px; margin-right: -16px;">
			<!-- Buttons Container -->
			<div class="flex justify-between items-center mb-4 pt-2 pl-2 pr-2">
				// <a href="/" class="btn btn-primary btn-sm">Back to Dashboard</a>
				<div>
					if slices.Contains(projectRoles, database.ProjectRoleManager) {
						<div class="flex">
							<form hx-get={ fmt.Sprintf("/%v/createuserstory", projectID) } hx-target="#dialog" style="display: inline;">
								<button class="btn btn-primary btn-sm">Create User Story</button>
							</form>
							<a href="/docs/product_backlog#product-backlog" target="_blank" class="help-button ml-4" style="position: relative;top:0px;right:0px">?</a>
						</div>
					} else if slices.Contains(projectRoles, database.ProjectRoleMaster) {
						<div class="flex">
							<form hx-get={ fmt.Sprintf("/%v/createuserstory", projectID) } hx-target="#dialog" style="display: inline;">
								<button class="btn btn-primary btn-sm">Create User Story</button>
							</form>
							<form hx-get={ fmt.Sprintf("/%v/createsprint", projectID) } hx-target="#dialog" style="display: inline;">
								<button class="btn btn-primary btn-sm ml-2">Create Sprint</button>
							</form>
							<a href="/docs/product_backlog#product-backlog" target="_blank" class="help-button ml-4" style="position: relative;top:0px;right:0px">?</a>
						</div>
					} else {
						<a href="/docs/product_backlog#product-backlog" target="_blank" class="help-button" style="position: relative;top:0px;right:0px">?</a>
					}
				</div>
			</div>
			<div class="tabs tabs-boxed bg-base-100">
				<a class="tab tab-active" data-content="backlog" onclick="toggleTab('backlog')">Backlog</a>
				<a class="tab" data-content="future" onclick="toggleTab('future')">Future Releases</a>
				<a class="tab" data-content="done" onclick="toggleTab('done')">Done User Stories</a>
			</div>
			<div class="flex flex-col w-full lg:flex-row">
				<!-- Tabs container -->
				<div id="backlog" class="tab-content w-full lg:w-1/3" style="display: block;">
					<!-- Include the backlog content here -->
					@backlog(backlogUserStories, getActiveSprint(sprints), "/productbacklog?projectID="+strconv.Itoa(int(projectID)), projectRoles)
				</div>
				<div id="future" class="tab-content w-full lg:w-1/3" style="display: none;">
					@future(futureUserStories)
				</div>
				<div id="done" class="tab-content w-full lg:w-1/3" style="display: none;">
					@done(doneUserStories)
				</div>
				<!-- Divide -->
				<div class="divider lg:divider-horizontal"></div>
				<!-- Sprints -->
				<div class="bg-base-100 join join-vertical w-full lg:w-2/3 mt-2 mr-2">
					<!-- Sprint -->
					for _,sprint := range sprints {
						<div class="collapse collapse-arrow border border-base-300 mb-4">
							<input type="checkbox" checked/>
							<div class="collapse-title text-xl font-medium bg-base-300 text-base-500" style="display: flex; justify-content: space-between;">
								<div>
									{ sprint.Title }
									<div class="text-sm text-gray-600">{ sprint.StartDate.Format("Mon Jan _2 2006") } - { sprint.EndDate.Format("Mon Jan _2 2006") }</div>
									<div class="text-sm text-gray-600">Velocity: { strconv.FormatFloat(float64(*sprint.Velocity), 'f', 2, 64) } spt</div>
								</div>
								if sprint.DetermineStatus() == database.StatusInProgress {
									<!-- Edit sprint Button -->
									<span>
										if slices.Contains(projectRoles, database.ProjectRoleMaster) {
											<span class="inline-flex items-center py-0.5" title="Edit sprint">
												<button hx-get={ fmt.Sprintf("/%v/sprint/%v", projectID, sprint.ID) } hx-target="#dialog" class="btn btn-sm bg-primary" style="position: relative; z-index: 1;">
													<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="white" class="w-5 h-5">
														<path d="m5.433 13.917 1.262-3.155A4 4 0 0 1 7.58 9.42l6.92-6.918a2.121 2.121 0 0 1 3 3l-6.92 6.918c-.383.383-.84.685-1.343.886l-3.154 1.262a.5.5 0 0 1-.65-.65Z"></path>
														<path d="M3.5 5.75c0-.69.56-1.25 1.25-1.25H10A.75.75 0 0 0 10 3H4.75A2.75 2.75 0 0 0 2 5.75v9.5A2.75 2.75 0 0 0 4.75 18h9.5A2.75 2.75 0 0 0 17 15.25V10a.75.75 0 0 0-1.5 0v5.25c0 .69-.56 1.25-1.25 1.25h-9.5c-.69 0-1.25-.56-1.25-1.25v-9.5Z"></path>
													</svg>
												</button>
											</span>
										}
										<span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-300">
											Active
										</span>
									</span>
								} else if sprint.DetermineStatus() == database.StatusDone {
									<span>
										<span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-300">
											Done
										</span>
									</span>
								} else {
									<span>
										if slices.Contains(projectRoles, database.ProjectRoleMaster) {
											<!-- Edit sprint Button -->
											<span class="inline-flex items-center px-2 py-0.5" title="Edit sprint">
												<button hx-get={ fmt.Sprintf("/%v/sprint/%v", projectID, sprint.ID) } hx-target="#dialog" class="btn btn-sm bg-primary" style="position: relative; z-index: 1;">
													<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="white" class="w-5 h-5">
														<path d="m5.433 13.917 1.262-3.155A4 4 0 0 1 7.58 9.42l6.92-6.918a2.121 2.121 0 0 1 3 3l-6.92 6.918c-.383.383-.84.685-1.343.886l-3.154 1.262a.5.5 0 0 1-.65-.65Z"></path>
														<path d="M3.5 5.75c0-.69.56-1.25 1.25-1.25H10A.75.75 0 0 0 10 3H4.75A2.75 2.75 0 0 0 2 5.75v9.5A2.75 2.75 0 0 0 4.75 18h9.5A2.75 2.75 0 0 0 17 15.25V10a.75.75 0 0 0-1.5 0v5.25c0 .69-.56 1.25-1.25 1.25h-9.5c-.69 0-1.25-.56-1.25-1.25v-9.5Z"></path>
													</svg>
												</button>
											</span>
											<!-- Delete sprint Button -->
											<span class="inline-flex items-center py-0.5" title="Delete sprint">
												<button hx-delete={ fmt.Sprintf("/%v/sprint/%v", projectID, sprint.ID) } hx-target="#dialog" class="btn btn-sm bg-primary" style="position: relative; z-index: 1;">
													<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="white" class="w-5 h-5">
														<path fill-rule="evenodd" d="M8.75 1A2.75 2.75 0 0 0 6 3.75v.443c-.795.077-1.584.176-2.365.298a.75.75 0 1 0 .23 1.482l.149-.022.841 10.518A2.75 2.75 0 0 0 7.596 19h4.807a2.75 2.75 0 0 0 2.742-2.53l.841-10.52.149.023a.75.75 0 0 0 .23-1.482A41.03 41.03 0 0 0 14 4.193V3.75A2.75 2.75 0 0 0 11.25 1h-2.5ZM10 4c.84 0 1.673.025 2.5.075V3.75c0-.69-.56-1.25-1.25-1.25h-2.5c-.69 0-1.25.56-1.25 1.25v.325C8.327 4.025 9.16 4 10 4ZM8.58 7.72a.75.75 0 0 0-1.5.06l.3 7.5a.75.75 0 1 0 1.5-.06l-.3-7.5Zm4.34.06a.75.75 0 1 0-1.5-.06l-.3 7.5a.75.75 0 1 0 1.5.06l.3-7.5Z" clip-rule="evenodd"></path>
													</svg>
												</button>
											</span>
										}
										<span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-300">
											Upcoming
										</span>
									</span>
								}
							</div>
							<div class="collapse-content card-body bg-base-100">
								<div class="flex justify-end">
									<!-- Places the button nicely -->
									<!-- Sprint Backlog Button -->
									<div>Current load: { strconv.FormatFloat(float64(getCurrentLoad(sprint.UserStories)), 'f', 2, 64) } spt</div>
									if (sprint.DetermineStatus() == database.StatusInProgress) && !slices.Contains(projectRoles, database.ProjectRoleManager) {
										<form hx-get={ fmt.Sprint("/sprintbacklog/", sprint.ID) } hx-target="#whole" hx-push-url="true" class="ml-auto">
											<button class="btn btn-sm bg-primary">Sprint Backlog</button>
										</form>
									}
								</div>
								<!-- user story table and other contents -->
								if len(sprint.UserStories) > 0 {
									<div class="overflow-x-auto">
										<table class="table">
											<!-- head -->
											<thead>
												<tr>
													<th>Title</th>
													<th>Description</th>
													<th>Priority</th>
													<th>Assigned</th>
													<th>Realized</th>
													<th></th>
												</tr>
											</thead>
											<tbody>
												<!-- User stories rows -->
												for _, v := range sprint.UserStories {
													@userStoryTableRow(v, sprint.DetermineStatus(), projectRoles, "/productbacklog?projectID="+strconv.Itoa(int(projectID)))
												}
											</tbody>
										</table>
									</div>
								} else {
									<div>No user stories in sprint yet</div>
								}
							</div>
						</div>
					}
				</div>
			</div>
		</div>
	}
}

func getCurrentLoad(userStories []database.UserStory) float32 {
	var currentLoad int

	for _, us := range userStories {
		currentLoad += int(us.StoryPoints)
	}

	return float32(currentLoad)
}

templ userStoryCard(name string, description string) {
	<!-- user story -->
	<div class="card card-compact bg-base-100 shadow-xl hover:shadow-2xl transition-shadow w-full">
		<div class="card-body">
			<h2 class="card-title">{ name }</h2>
			<p>{ description }</p>
		</div>
	</div>
}

templ backlog(backlogUserStories []database.UserStory, sprint database.Sprint, callback string, projectRoles []database.ProjectRole) {
	<div class="card card-compact bg-base-200 transition-shadow mt-2">
		<div class="card-title collapse-title text-xl font-medium bg-base-300 border-base-300 rounded-t-2xl">Backlog</div>
		<a href="/docs/sprints#adding-user-stories-to-sprint" target="_blank" class="help-button" style="padding-right=10rem;">?</a>
		<div class="card-body" hx-ext="response-targets">
			<form id="backlogForm" hx-post="/productbacklog" hx-target-400="#add-to-sprint-validation-error">
				<div class="overflow-x-auto">
					<table class="table w-full">
						<thead>
							<tr>
								<th>Title</th>
								<th>Description</th>
								<th>Details</th>
								if slices.Contains(projectRoles, database.ProjectRoleMaster) {
									<th>Selected</th>
								}
							</tr>
						</thead>
						<tbody>
							for _, us := range backlogUserStories {
								<tr>
									<td>{ us.Title }</td>
									<td class="min-w-[12rem] max-w-[20rem] truncate">
										{ *us.Description }
									</td>
									<td>
										<!--Details button-->
										<button hx-get={ fmt.Sprintf("/userstory/%v/details", us.ID) } hx-target="#dialog" hx-indicator="#dialog" class="btn btn-xs">
											<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
												<path stroke-linecap="round" stroke-linejoin="round" d="M6.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM12.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM18.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z"></path>
											</svg>
										</button>
									</td>
									if slices.Contains(projectRoles, database.ProjectRoleMaster) {
										if us.StoryPoints != 0 {
											<td><input type="checkbox" class="checkbox" name="selectedTasks" value={ strconv.Itoa(int(us.ID)) }/></td>
										} else {
											<td><input type="checkbox" class="checkbox" name="selectedTasks" value={ strconv.Itoa(int(us.ID)) } title="Please add story points" disabled/></td>
										}
									}
								</tr>
							}
						</tbody>
					</table>
				</div>
				if slices.Contains(projectRoles, database.ProjectRoleMaster) {
					<div class="mt-4 flex justify-end">
						<input type="hidden" name="sprintID" value={ strconv.Itoa(int(sprint.ID)) }/>
						if sprint.Velocity != nil {
							<input type="hidden" name="velocity" value={ strconv.FormatFloat(float64(*sprint.Velocity), 'f', 2, 64) }/>
						}
						<input type="hidden" name="active_sprint_load" value={ strconv.FormatFloat(float64(getCurrentLoad(sprint.UserStories)), 'f', 2, 64) }/>
						<input type="hidden" name="callback" value={ callback }/>
						if int(sprint.ID) == 0 {
							<div class="btn-container" title="There is no active sprint to add stories to.">
								<button type="submit" class="btn btn-primary" disabled>Add to Sprint</button>
							</div>
						} else {
							<button type="submit" class="btn btn-primary">Add to Sprint</button>
						}
					</div>
					<div id="add-to-sprint-validation-error" class="mt-4"></div>
				}
			</form>
		</div>
	</div>
}

templ future(backlogUserStories []database.UserStory) {
	<div class="card card-compact bg-base-200 transition-shadow mt-2">
		<div class="card-title collapse-title text-xl font-medium bg-base-300 border-base-300 rounded-t-2xl">Future Releases</div>
		<a href="/docs/sprints#adding-user-stories-to-sprint" target="_blank" class="help-button" style="padding-right=10rem;">?</a>
		<div class="card-body">
			<form id="backlogForm" hx-post="/productbacklog">
				<div class="overflow-x-auto">
					<table class="table w-full">
						<thead>
							<tr>
								<th>Title</th>
								<th>Description</th>
								<th>Details</th>
							</tr>
						</thead>
						<tbody>
							for _, us := range backlogUserStories {
								<tr>
									<td>{ us.Title }</td>
									<td class="min-w-[12rem] max-w-[20rem] truncate">
										{ *us.Description }
									</td>
									<td>
										<!--Details button-->
										<button hx-get={ fmt.Sprintf("/userstory/%v/details", us.ID) } hx-target="#dialog" hx-indicator="#dialog" class="btn btn-xs">
											<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
												<path stroke-linecap="round" stroke-linejoin="round" d="M6.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM12.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM18.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z"></path>
											</svg>
										</button>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</form>
		</div>
	</div>
}

templ done(backlogUserStories []database.UserStory) {
	<div class="card card-compact bg-base-200 transition-shadow mt-2">
		<div class="card-title collapse-title text-xl font-medium bg-base-300 border-base-300 rounded-t-2xl">Done User Stories</div>
		<a href="/docs/sprints#adding-user-stories-to-sprint" target="_blank" class="help-button" style="padding-right=10rem;">?</a>
		<div class="card-body">
			<form id="backlogForm" hx-post="/productbacklog">
				<div class="overflow-x-auto">
					<table class="table w-full">
						<thead>
							<tr>
								<th>Title</th>
								<th>Description</th>
								<th>Details</th>
							</tr>
						</thead>
						<tbody>
							for _, us := range backlogUserStories {
								<tr>
									<td>{ us.Title }</td>
									<td class="min-w-[12rem] max-w-[20rem] truncate">
										{ *us.Description }
									</td>
									<td>
										<!--Details button-->
										<button hx-get={ fmt.Sprintf("/userstory/%v/details", us.ID) } hx-target="#dialog" hx-indicator="#dialog" class="btn btn-xs">
											<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
												<path stroke-linecap="round" stroke-linejoin="round" d="M6.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM12.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM18.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z"></path>
											</svg>
										</button>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</form>
		</div>
	</div>
}

func getActiveSprint(sprints []database.Sprint) database.Sprint {

	var activeSprint database.Sprint
	for _, sprint := range sprints {
		if sprint.DetermineStatus() == database.StatusInProgress {
			activeSprint = sprint
		}
	}
	return activeSprint
}

templ userStoryTableRow(us database.UserStory, status database.Status, projectRoles []database.ProjectRole, callback string) {
	<!-- row 1 -->
	<tr class="hover">
		<td>
			<div class="font-bold">{ us.Title }</div>
		</td>
		<!-- Description -->
		<td class="min-w-[12rem] max-w-[20rem] truncate">
			{ *us.Description }
		</td>
		<!-- Priority -->
		<td>
			switch us.Priority {
				case database.PriorityMustHave:
					<div class="badge badge-error">Must have</div>
				case database.PriorityCouldHave:
					<div class="badge badge-warning">Could have</div>
				case database.PriorityShouldHave:
					<div class="badge badge-success">Should have</div>
				case database.PriorityWontHaveThisTime:
					<div class="badge badge-info">Won't have this time</div>
				default:
					<span></span>
			}
		</td>
		<!-- Assigned -->
		<td>
			if us.UserID == nil {
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
				</svg>
			} else {
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5"></path>
				</svg>
			}
		</td>
		<!-- Realized -->
		<td>
			if *us.Realized {
				<span class="text-green-500 text-lg">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
						<path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5"></path>
					</svg>
				</span>
			} else {
				<span class="text-red-500 text-lg">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
						<path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
					</svg>
				</span>
			}
		</td>
		<!-- Details -->
		<td>
			<div class="flex flex-col space-y-2">
				<div class="flex btn-container space-x-4 max-w-[10rem]">
					<!--Details button-->
					<button hx-get={ fmt.Sprintf("/userstory/%v/details", us.ID) } hx-target="#dialog" hx-indicator="#dialog" class="btn btn-xs">
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
							<path stroke-linecap="round" stroke-linejoin="round" d="M6.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM12.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM18.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z"></path>
						</svg>
					</button>
					<!--Remove from sprint button-->
					<!--if *us.Realized {
						<div class="flex-grow" title="Can't remove relaized user story from sprint">
							<button class="btn btn-xs" disabled>
								<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
									<path stroke-linecap="round" stroke-linejoin="round" d="m9.75 9.75 4.5 4.5m0-4.5-4.5 4.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path>
								</svg>
							</button>
						</div>
					} else {
						<form class="flex-grow" hx-post={ fmt.Sprintf("/userstory/%v/remove-from-sprint", us.ID) } hx-target="#dialog">
							<input type="hidden" name="callback" value={ callback }/>
							<button class="btn btn-xs">
								<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
									<path stroke-linecap="round" stroke-linejoin="round" d="m9.75 9.75 4.5 4.5m0-4.5-4.5 4.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path>
								</svg>
							</button>
						</form>
					}-->
				</div>
				<div class="flex justify-start space-x-2">
					if (*us.Realized == false && slices.Contains(projectRoles, database.ProjectRoleManager) && status == database.StatusDone) {
						if (us.AllTasksRealized() == false && us.AllAcceptanceTestsRealized() == false) {
							<div class="btn-container" title="Not all tasks were realized and not all acceptance tests were passed for this user story.">
								<button type="submit" class="btn btn-xs" disabled>Accept</button>
							</div>
							<form hx-get={ fmt.Sprintf("/userstory/%v/reject", us.ID) } hx-target="#dialog">
								<button type="submit" class="btn bg-red-500 btn-xs">Reject</button>
							</form>
						} else if us.AllTasksRealized() == false && us.AllAcceptanceTestsRealized() == true {
							<div class="btn-container" title="Not all tasks were realized for this user story.">
								<button type="submit" class="btn btn-xs" disabled>Accept</button>
							</div>
							<form hx-get={ fmt.Sprintf("/userstory/%v/reject", us.ID) } hx-target="#dialog">
								<button type="submit" class="btn bg-red-500 btn-xs">Reject</button>
							</form>
						} else if us.AllTasksRealized() == true && us.AllAcceptanceTestsRealized() == false {
							<div class="btn-container" title="Not all acceptance tests were passed for this user story.">
								<button type="submit" class="btn btn-xs" disabled>Accept</button>
							</div>
							<form hx-get={ fmt.Sprintf("/userstory/%v/reject", us.ID) } hx-target="#dialog">
								<button type="submit" class="btn bg-red-500 btn-xs">Reject</button>
							</form>
						} else {
							<form hx-post={ fmt.Sprintf("/userstory/%v/accept", us.ID) } id="backlogForm">
								<button type="submit" class="btn bg-green-600 btn-xs">Accept</button>
							</form>
							<form hx-get={ fmt.Sprintf("/userstory/%v/reject", us.ID) } hx-target="#dialog">
								<button type="submit" class="btn bg-red-500 btn-xs">Reject</button>
							</form>
						}
					}
				</div>
			</div>
		</td>
	</tr>
}

templ CreateRejectionCommentDialog(userStoryID uint) {
	@common.CreateDialog("Create rejection comment", http.MethodPost, fmt.Sprintf("userstory/%v/reject", userStoryID), "Create") {
		<!-- Rejection Comment Field -->
		<div class="mb-4">
			<textarea id="comment" name="comment" class="textarea mt-1 p-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" required></textarea>
		</div>
	}
}
