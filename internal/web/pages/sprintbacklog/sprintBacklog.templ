package sprintbacklog

import "tasklify/internal/database"
import "fmt"
import "strconv"
import "slices"

// sprintBacklog.templ:
templ sprintBacklog(sprint *database.Sprint, projectRoles []database.ProjectRole, userId uint) {
	<div class="bg-base-100 min-h-screen">
		<div class="container mx-auto p-2">
			<!-- Back to Product Backlog Button -->
			<div class="mb-2">
				<div class="flex justify-between items-center">
					<form hx-get="/productbacklog" hx-target="#whole" hx-push-url="true">
						<input type="hidden" id="projectID" name="projectID" value={ fmt.Sprint(sprint.ProjectID) }/>
						<button class="btn btn-primary btn-xs">Back To Product Backlog</button>
					</form>
					<a href="https://github.com/tasklify/tasklify/tree/main?tab=readme-ov-file#sprint-backlog" target="_blank" class="help-button ml-4" style="position: relative;top:0px;right:0px">?</a>
				</div>
				<!-- Sprint Details -->
				<div class="sprint-details flex justify-between items-center mb-4 p-2 shadow-lg bg-white rounded-lg">
					<h2 class="font-bold text-lg" style="padding-left: 15px;">{ sprint.Title }</h2>
					<p class="text-sm" style="padding-right: 10px;">({ sprint.StartDate.Format("Mon Jan _2 2006") } - { sprint.EndDate.Format("Mon Jan _2 2006") })</p>
				</div>
			</div>
			<!-- User Stories -->
			for _, story := range sprint.UserStories {
				<div class="border border-base-300 mb-2 rounded-lg">
					<div class="flex justify-between items-center bg-base-300 p-2">
						<div>
							<div class="font-medium text-lg" style="padding-left: 15px;">{ story.Title }</div>
						</div>
						<div class="flex gap-2 mt-2">
							<button hx-get={ fmt.Sprintf("/userstory/%v/details", story.ID) } hx-target="#dialog" class="btn btn-xs">
								<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
									<path stroke-linecap="round" stroke-linejoin="round" d="M6.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM12.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM18.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z"></path>
								</svg>
							</button>
							<!-- Create task Button -->
							if *story.Realized {
								if slices.Contains(projectRoles, database.ProjectRoleMaster) || slices.Contains(projectRoles, database.ProjectRoleDeveloper) {
									<form hx-get={ fmt.Sprintf("/userstory/%v/create-task", story.ID) } hx-target="#dialog" title="Can't add tasks to realized user story">
										<input type="hidden" id="sprintID" name="sprintID" value={ strconv.Itoa(int(sprint.ID)) }/>
										<input type="hidden" id="projectID" name="projectID" value={ strconv.Itoa(int(story.ProjectID)) }/>
										<button class="btn btn-xs btn-primary" style="margin-right: 10px;" disabled>Create Task</button>
									</form>
								}
							} else {
								if slices.Contains(projectRoles, database.ProjectRoleMaster) || slices.Contains(projectRoles, database.ProjectRoleDeveloper) {
									<form hx-get={ fmt.Sprintf("/userstory/%v/create-task", story.ID) } hx-target="#dialog">
										<input type="hidden" id="sprintID" name="sprintID" value={ strconv.Itoa(int(sprint.ID)) }/>
										<input type="hidden" id="projectID" name="projectID" value={ strconv.Itoa(int(story.ProjectID)) }/>
										<button class="btn btn-xs btn-primary" style="margin-right: 10px;">Create Task</button>
									</form>
								}
							}
						</div>
					</div>
					<div class="collapse-body card-body bg-base-100 p-2">
						<table class="w-full">
							<thead>
								<tr class="text-sm font-bold">
									<th class="text-left p-2" style="width: 35%;"></th>
									<th class="text-left p-2" style="width: 20%;">Assigned To</th>
									<th class="text-left p-2" style="width: 8%;">Estimated (h)</th>
									<th class="text-left p-2" style="width: 8%;">Logged (h)</th>
									<th class="text-left p-2" style="width: 8%;">Remaining (h)</th>
									<th class="text-center p-2" style="width: 15%;">Status</th>
									<th class="text-right p-2" style="width: 6%;"></th>
								</tr>
							</thead>
							<tbody>
								for _, task := range story.Tasks {
									@TaskRowSmall(task, userId, sprint.ID)
								}
							</tbody>
							<tr class="text-left text-sm font-bold">
								<td class="p-2" colspan="2">Total:</td>
								<td class="p-2">{ strconv.FormatFloat(float64(GetSumOfTimeEstimates(story.Tasks)), 'f', 2, 64) }</td>
								<td class="p-2">0.00</td>
								<td class="p-2" colspan="2"></td>
							</tr>
						</table>
					</div>
				</div>
			}
		</div>
	</div>
}

templ TaskRowSmall(task database.Task, userId uint, sprintID uint) {
	<!-- Flex container for aligning assignee and details button -->
	<tr class="bg-base-300 shadow-lg">
		<td class="font-bold text-md pl-4">{ *task.Title }</td>
		<td class="text-left p-2">
			if task.UserID == nil {
				<span class="badge badge-ghost">Assign</span>
			} else if !*task.UserAccepted {
				<span class="badge bg-primary">{ GetUserFirstAndLastNameFromID(*task.UserID) }</span> <span class="text-xs italic">(pending)</span>
			} else {
				<div class="flex items-center">
					<span class="badge bg-primary mr-2">{ GetUserFirstAndLastNameFromID(*task.UserID) }</span>
					if *task.UserID == userId {
						<button hx-get={ fmt.Sprintf("/sprintbacklog/%v/task/%v/unassign", sprintID, task.ID) } class="btn btn-xs" title="Unassign">
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" class="w-5 h-5">
								<path d="M11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM2.046 15.253c-.058.468.172.92.57 1.175A9.953 9.953 0 0 0 8 18c1.982 0 3.83-.578 5.384-1.573.398-.254.628-.707.57-1.175a6.001 6.001 0 0 0-11.908 0ZM12.75 7.75a.75.75 0 0 0 0 1.5h5.5a.75.75 0 0 0 0-1.5h-5.5Z"></path>
							</svg>
						</button>
					}
				</div>
			}
		</td>
		<td class="text-left p-2">
			<span>{ strconv.FormatFloat(float64(*task.TimeEstimate), 'f', 2, 64) }</span>
		</td>
		<td class="text-left p-2">
			<span>0.00</span>
		</td>
		<td class="text-left p-2">
			<span>0.00</span>
		</td>
		<td class="text-center p-2">
			if GetTaskStatus(task) == "Unassigned" {
				<span class="text-sm badge bg-unassigned-300">{ GetTaskStatus(task) }</span>
			} else if GetTaskStatus(task) == "Pending" {
				<span class="text-sm badge bg-pending-300">{ GetTaskStatus(task) }</span>
			} else if GetTaskStatus(task) == "Assigned" {
				<span class="text-sm badge bg-assigned-300">{ GetTaskStatus(task) }</span>
			} else if GetTaskStatus(task) == "Active" {
				<span class="text-sm badge bg-active-300">{ GetTaskStatus(task) }</span>
			} else if GetTaskStatus(task) == "Done" {
				<span class="text-sm badge bg-done-300">{ GetTaskStatus(task) }</span>
			}
		</td>
		<td class="text-right pr-2 rounded-r-lg" style="margin-top: 10px; margin-bottom: -10px; display: flex; justify-content: flex-end;">
			<div class="start-button">
				if (GetTaskStatus(task) == "Assigned") && (userId == *task.UserID) {
					<form hx-post={ fmt.Sprintf("/sprintbacklog/%v/task/%v/start", sprintID, task.ID) }>
						<button type="submit" class="btn btn-xs">Start</button>
					</form>
				}
			</div>
			<div class="logged-button">
				if (GetTaskStatus(task) == "Active") && (userId == *task.UserID) {
					<form hx-get={ fmt.Sprintf("/sprintbacklog/%v/task/%v/logged", sprintID, task.ID) } hx-target="#dialog">
						<button class="btn btn-xs">Logs</button>
					</form>
				}
			</div>
			<div class="details-button ml-2">
				<form hx-get={ fmt.Sprintf("/sprintbacklog/%v/task/%v/details", sprintID, task.ID) } hx-target="#dialog">
					<button class="btn btn-xs">
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
							<path stroke-linecap="round" stroke-linejoin="round" d="M6.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM12.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM18.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z"></path>
						</svg>
					</button>
				</form>
			</div>
		</td>
		<tr><td style="height: 10px;"></td></tr>
	</tr>
}
