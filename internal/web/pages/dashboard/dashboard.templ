package dashboard

import (
	"net/http"
	"tasklify/internal/database"
	"tasklify/internal/handlers"
	"tasklify/internal/web/pages"
	"tasklify/internal/auth"
	"fmt"
	"strconv"
	"github.com/go-chi/chi/v5"
	"slices"
)

func Dashboard(w http.ResponseWriter, r *http.Request, params handlers.RequestParams) error {
	myProjects, err := database.GetDatabase().GetUserProjects(params.UserID)
	if err != nil {
		return err
	}

	myTasks, err := database.GetDatabase().GetUserTasks(params.UserID)
	if err != nil {
		return err
	}

	user, err := database.GetDatabase().GetUserByID(params.UserID)
	if err != nil {
		return err
	}

	c := dashboard(myProjects, myTasks, user.SystemRole, params.UserID)
	return pages.Layout(c, "Tasklify", r).Render(r.Context(), w)
}

func GetProjectDescriptionDialog(w http.ResponseWriter, r *http.Request, params handlers.RequestParams) error {
	projectIDInt, err := strconv.Atoi(chi.URLParam(r, "projectID"))
	if err != nil {
		return err
	}
	projectID := uint(projectIDInt)

	project, err := database.GetDatabase().GetProjectByID(projectID)
	if err != nil {
		return err
	}

	c := ProjectDescriptionDialog(*project)
	return c.Render(r.Context(), w)
}

func GetTaskStatus(task database.Task) string {
	if task.UserID == nil {
		return "Unassigned"
	} else {
		if !*task.UserAccepted {
			return "Pending"
		} else if *task.Status == database.StatusInProgress {
			return "Active"
		} else if *task.Status == database.StatusDone {
			return "Done"
		} else {
			return "Assigned"
		}
	}
}

templ dashboard(myProjects []database.Project, myTasks []database.Task, user_SystemRole database.SystemRole, currentUserID uint) {
	<style>
		span.role-span:after {
			content: ', ';
		}
	</style>
	<div class="bg-base-200 min-h-screen">
		<div class="p-10">
			<div role="tablist" class="tabs tabs-bordered">
				<input type="radio" name="project_tasks_tabs" role="tab" class="tab text-lg whitespace-nowrap font-light" aria-label="My Projects" checked/>
				<div role="tabpanel" class="tab-content pt-8 px-3">
					<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
						<!-- Add New Project -->
						if auth.GetAuthorization().HasSystemPermission(user_SystemRole, "/project", auth.ActionCreate) == nil {
							<div class="card card-compact bg-base-100 shadow-xl hover:shadow-2xl transition-shadow flex justify-center items-center">
								<div class="card-body">
									<div>
										<h2 class="card-title">Add new project</h2>
										<a href="/docs/projects#creating-projects" target="_blank" class="help-button">?</a>
									</div>
									<div class="flex justify-center">
										<button class="btn btn-primary btn-circle btn-lg" hx-get="/create-project" hx-target="#dialog">
											<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
												<path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4"></path>
											</svg>
										</button>
									</div>
								</div>
							</div>
						}
						if len(myProjects) == 0 {
							<span>You are not member of any projects</span>
						}
						for _, project := range myProjects {
							<div class="card card-compact bg-base-100 shadow-xl hover:shadow-2xl transition-shadow">
								<div class="card-body">
									<div class="flex">
										<h2 class="card-title flex-1">{ project.Title }</h2>
										<form hx-get={ fmt.Sprint("/dashboard/project-description/", project.ID) } hx-target="#dialog" style="all: unset" title="Show description">
											<button class="btn btn-xs ml-2">
												@DescriptionIcon()
											</button>
										</form>
									</div>
									<div class="flex">
										<span class="whitespace-nowrap font-medium">My role:&nbsp;</span>
										<div class="empty:after:content-['/']">
											for _, role := range project.GetUserRoles(currentUserID) {
												<span class="role-span last:after:content-[''] font-light">{ role.GetLabel() }</span>
											}
										</div>
									</div>
									<div class="flex items-center">
										<span class="whitespace-nowrap font-medium">Active sprint:&nbsp;</span>
										<div class="font-light">
											@ActiveSprint(project.GetActiveSprint(), project.GetUserRoles(currentUserID))
										</div>
									</div>
									<div class="card-actions justify-end flex-1 content-end">
										<form hx-get="/productbacklog" hx-target="#whole" hx-swap="innerHTML" hx-push-url="true" style="all: unset">
											<input type="hidden" id="projectID" name="projectID" value={ fmt.Sprint(project.ID) }/>
											<button class="btn btn-sm btn-primary">View project</button>
										</form>
									</div>
								</div>
							</div>
						}
					</div>
				</div>
				<input type="radio" name="project_tasks_tabs" role="tab" class="tab text-lg whitespace-nowrap font-light" aria-label="My Tasks"/>
				<div role="tabpanel" class="tab-content pt-8 px-3">
					if len(myTasks) == 0 {
						<span>You are not assigned to any tasks</span>
					} else {
						<div class="overflow-x-auto block w-full bg-base-100 rounded-lg border border-base-300">
							<table class="table table-auto w-full ">
								<thead class="bg-base-300">
									<tr>
										<th class="w-6/12">Task</th>
										<th class="w-3/12">Project</th>
										<th>Status</th>
										<th style="width: 1%"></th>
									</tr>
								</thead>
								<tbody class="max-h-80 overflow-y-auto">
									for _, task := range myTasks {
										<tr class="hover">
											<td class="text-gray-950">
												<div class="flex flex-col">
													<span class="font-bold text-sm">
														if task.UserStory.Sprint != nil && task.UserStory.Sprint.DetermineStatus() == database.StatusInProgress {
															<a hx-get={ fmt.Sprintf("/sprintbacklog/%v", *task.UserStory.SprintID) } hx-target="#whole" hx-push-url="true" class="link link-hover" title="Go to sprint backlog">
																{ *task.Title }
															</a>
														} else {
															{ *task.Title }
														}
													</span>
													<span class="text-xs">{ task.UserStory.Title }</span>
												</div>
											</td>
											<td class="text-gray-950">
												<a
													class="link link-info link-hover"
													hx-get={ fmt.Sprint("/productbacklog?projectID=", task.ProjectID) }
													hx-target="#whole"
													hx-swap="innerHTML"
													hx-push-url="true"
													title="Go to project"
												>
													{ task.Project.Title }
												</a>
											</td>
											<td class="text-gray-950">
												if GetTaskStatus(task) == "Unassigned" {
													<span class="text-sm badge bg-unassigned-300">{ GetTaskStatus(task) }</span>
												} else if GetTaskStatus(task) == "Pending" {
													<span class="text-sm badge bg-pending-300">{ GetTaskStatus(task) }</span>
												} else if GetTaskStatus(task) == "Assigned" {
													<span class="text-sm badge bg-assigned-300">{ GetTaskStatus(task) }</span>
												} else if GetTaskStatus(task) == "Active" {
													<span class="text-sm badge bg-active-300">{ GetTaskStatus(task) }</span>
												} else if GetTaskStatus(task) == "Done" {
													<span class="text-sm badge bg-done-300">{ GetTaskStatus(task) }</span>
												}
											</td>
											<td class="text-gray-950">
												<span title="Details">
													<div class="details-button">
														<form hx-get={ fmt.Sprintf("/sprintbacklog/%v/task/%v/details", task.UserStory.SprintID, task.ID) } hx-target="#dialog" style="all: unset">
															<button class="btn btn-xs">
																<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
																	<path stroke-linecap="round" stroke-linejoin="round" d="M6.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM12.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM18.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z"></path>
																</svg>
															</button>
														</form>
													</div>
												</span>
											</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					}
				</div>
			</div>
		</div>
		<div id="project-dialog"></div>
	</div>
}

templ ProjectDescriptionDialog(project database.Project) {
	<div hx-ext="response-targets">
		<div id="create-dialog" hx-ext="response-targets" class="fixed top-0 left-0 w-full h-full bg-gray-900 bg-opacity-50 flex justify-center items-start py-11 z-50">
			<div class="bg-white rounded-lg shadow-lg w-2/5 h-auto max-h-full flex flex-col p-4 absolute">
				<button class="btn btn-circle btn-sm bg-white" style="position: absolute; right: -14px; top: -14px;" hx-on:click="dialog_container.close()">âœ•</button>
				<div>
					<p class="font-medium text-[17px] mb-2">Description</p>
					<span class="font-light text-[14px] whitespace-break-spaces">{ project.Description }</span>
				</div>
			</div>
		</div>
	</div>
}

templ ActiveSprint(activeSprint *database.Sprint, projectRoles []database.ProjectRole) {
	if activeSprint == nil {
		<span class="italic">No sprint in progress</span>
	} else {
		if !slices.Contains(projectRoles, database.ProjectRoleManager) {
			<a
				class="link link-info link-hover"
				hx-get={ fmt.Sprint("/sprintbacklog/", activeSprint.ID) }
				hx-target="#whole"
				hx-swap="innerHTML"
				hx-push-url="true"
				title="Go to sprint backlog"
			>
				{ activeSprint.Title }
			</a>
		} else {
			<span>
				{ activeSprint.Title }
			</span>
		}
	}
}

templ DescriptionIcon() {
	<svg class="w-4" xmlns="http://www.w3.org/2000/svg" shape-rendering="geometricPrecision" text-rendering="geometricPrecision" image-rendering="optimizeQuality" fill-rule="evenodd" clip-rule="evenodd" viewBox="0 0 512 453.15">
		<path fill-rule="nonzero" d="M91.73 0H512v30.74H91.73V0zM0 422.41h31.55v30.74H0v-30.74zM0 0h31.55v30.74H0V0zm0 139.84h31.55v30.74H0v-30.74zm0 142.73h31.55v30.74H0v-30.74zm92.87 0h418v30.74h-418v-30.74zm0-142.73h418v30.74h-418v-30.74zm0 282.57h418v30.74h-418v-30.74z"></path>
	</svg>
}
