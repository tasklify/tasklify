package userSlug

import (
	"tasklify/internal/database"
	"tasklify/internal/web/components/form"
	"time"
	"fmt"
	"tasklify/internal/web/components/common"
	"net/http"
	"tasklify/internal/handlers"
	"github.com/go-chi/chi/v5"
	"strconv"
)

func GetUser(w http.ResponseWriter, r *http.Request, params handlers.RequestParams) error {
	temp, err := strconv.Atoi(chi.URLParam(r, "userID"))
	if err != nil {
		return err
	}
	requestedUserID := uint(temp)

	requestingUser, err := database.GetDatabase().GetUserByID(params.UserID)
	if err != nil {
		return err
	}

	if requestedUserID == params.UserID || requestingUser.SystemRole == database.SystemRoleAdmin {
		requestedUser, err := database.GetDatabase().GetUserByID(requestedUserID)
		if err != nil {
			return err
		}

		canEditSystemRole := true
		if requestedUserID == params.UserID {
			canEditSystemRole = false
		}

		c := getUser(requestedUser, canEditSystemRole)
		return c.Render(r.Context(), w)
	}

	w.WriteHeader(http.StatusUnauthorized)
	return nil
}

templ getUser(user *database.User, canEditSystemRole bool) {
	@common.CreateDialog(fmt.Sprintf("User %d", user.ID), http.MethodPatch, fmt.Sprintf("/users/%d", user.ID), "Update") {
		// Username
		@form.TextField("Username", "username", user.Username, user.Username)
		// Password
		@form.PasswordField("New password", "new_password", false, true)
		@form.PasswordField("Confirm new password", "new_password_confirm", false, true)
		// First name
		@form.TextField("First name", "first_name", user.FirstName, user.FirstName)
		// Last name
		@form.TextField("Last name", "last_name", user.LastName, user.LastName)
		// Email
		@form.EmailField("Email", "email", user.Email, user.Email)
		// Last login
		<div class="form-control">
			<label class="label">
				<span class="label-text">Last login</span>
			</label>
			<input
				value={ LastLogin(user) }
				type="text"
				name=""
				id=""
				placeholder={ LastLogin(user) }
				class="input input-bordered"
				disabled
			/>
		</div>
		// System role
		@form.SystemRoleField("System role", "system_role", user, canEditSystemRole)
		// Projects
		@form.ProjectsField("Projects", user)
		// Conformation password
		@form.PasswordField("Authenticate action with your password", "password", true, false)
	}
}

func LastLogin(user *database.User) string {
	if user.LastLogin != nil {
		fmt.Println(user.Username, *user.LastLogin)

		return user.LastLogin.Format(time.DateTime)
	}

	return "never logged in"
}
