package userSlug

import (
	"tasklify/internal/database"
	"tasklify/internal/web/components/form"
	"time"
	"strings"
	"fmt"
	"tasklify/internal/web/components/common"
	"net/http"
	"tasklify/internal/handlers"
	"github.com/go-chi/chi/v5"
	"strconv"
)

func User(w http.ResponseWriter, r *http.Request, params handlers.RequestParams) error {
	temp, err := strconv.Atoi(chi.URLParam(r, "userID"))
	if err != nil {
		return err
	}
	requestedUserID := uint(temp)

	requestingUser, err := database.GetDatabase().GetUserByID(params.UserID)
	if err != nil {
		return err
	}

	if requestedUserID == params.UserID || requestingUser.SystemRole == database.SystemRoleAdmin {
		requestedUser, err := database.GetDatabase().GetUserByID(requestedUserID)
		if err != nil {
			return err
		}

		c := user(requestedUser)
		return c.Render(r.Context(), w)
	}

	w.WriteHeader(http.StatusUnauthorized)
	return nil
}

templ user(user *database.User) {
	@common.CreateDialog(fmt.Sprintf("User %d", user.ID), fmt.Sprintf("/users/%d", user.ID)) {
		// Username
		<div class="form-control">
			<label class="label">
				<span class="label-text">Username</span>
			</label>
			<input value={ user.Username } type="text" name="username" id="username" placeholder={ user.Username } class="input input-bordered"/>
		</div>
		// Password
		@form.PasswordField("New password", "new_password", false, true)
		// First name
		<div class="form-control">
			<label class="label">
				<span class="label-text">First name</span>
			</label>
			<input value={ user.FirstName } type="text" name="first_name" id="first_name" placeholder={ user.FirstName } class="input input-bordered"/>
		</div>
		// Last name
		<div class="form-control">
			<label class="label">
				<span class="label-text">Last name</span>
			</label>
			<input value={ user.LastName } type="text" name="last_name" id="last_name" placeholder={ user.LastName } class="input input-bordered"/>
		</div>
		// Email
		<div class="form-control">
			<label class="label">
				<span class="label-text">Email</span>
			</label>
			<input value={ user.Email } type="email" name="email" id="email" placeholder={ user.Email } class="input input-bordered"/>
		</div>
		// Last login
		<div class="form-control">
			<label class="label">
				<span class="label-text">Last login</span>
			</label>
			<input
				value={ LastLogin(user) }
				type="text"
				name=""
				id=""
				placeholder={ LastLogin(user) }
				class="input input-bordered"
				disabled
			/>
		</div>
		// System role
		<div class="form-control">
			<label class="label">
				<span class="label-text">System role</span>
			</label>
			<select name="system_role" id="system_role" class="select select-bordered">
				for _, role := range database.SystemRoles.Values() {
					<option value={ role } selected?={ role == user.SystemRole.Val }>{ strings.TrimPrefix(role, "system_") }</option>
				}
			</select>
		</div>
		// Projects
		<div class="form-control">
			<label class="label">
				<span class="label-text">Projects</span>
			</label>
			<div hx-boost="true">
				for _, project := range user.Projects {
					<a class="btn btn-outline" href={ templ.URL(fmt.Sprintf("/projects/%d", project.ID)) }>{ project.Title }</a>
				}
				if  len(user.Projects) == 0 {
					<div>empty</div>
				}
			</div>
		</div>
		// Password
		@form.PasswordField("Confirm with current password", "current_password", true, false)
	}
}

func LastLogin(user *database.User) string {
	if user.LastLogin != nil {
		user.LastLogin.Format(time.DateTime)
	}

	return "never logged in"
}
